generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  image     String?
  kittenId  Int?
  type      String @default("blog")
  published Boolean @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt     DateTime  @default(now()) @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
  kitten   Kitten? @relation(fields: [kittenId], references: [id])
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Kitten {
  id       Int     @id @default(autoincrement())
  name     String 
  content  String?
  litter   Litter? @relation(fields: [litterId], references: [id])
  litterId Int?
  image   String?
  posts    Post[]
  datapoints KittenDataPoint[]
  birthdate  DateTime  @default(now()) @db.Timestamptz(0)
}

model KittenDataPoint {
  id       Int     @id @default(autoincrement())
  time     DateTime  @default(now()) @db.Timestamptz(0)
  kittenId  Int
  kitten   Kitten @relation(fields: [kittenId], references: [id])
  startWeight Int
  finalWeight Int
}

model KittenPost {
  id       Int     @id @default(autoincrement())
  kittenId Int
  name     String 
  content  String?
  image   String?
  published Boolean @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
}

model Litter {
  id          Int      @id @default(autoincrement())
  name        String @unique
  description String?
  Kitten      Kitten[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
